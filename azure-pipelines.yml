# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
- release/*

pool:
  vmImage: 'vs2017-win2016'

variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreInstaller@0
  inputs:
    version: '2.2.101'

- script: |
    dotnet build --configuration $(buildConfiguration)
    dotnet test tests --configuration $(buildConfiguration) --logger trx

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
    
# - powershell: |
#    $basePath = resolve-path .
#    $version = Get-Content .\Builds\version.json | Out-String | ConvertFrom-Json
#    $buildNumber = [int]$Env:BuildId
#    write-host "Build number $buildNumber" -fore white
#    $nugetPrerelease = if ($Env:SourceBranch.StartsWith("refs/heads/release/")) { $version.Prerelease } else { "build$($buildNumber.ToString("D6"))" }
#    write-host "Prerelease $nugetPrerelease" -fore white
#    .\Builds\run.build.ps1 -properties @{"majorVersion"="$($version.Major).0"; "majorWithReleaseVersion"="$($version.Major).0.$($version.Release)"; "nugetPrerelease"=$nugetPrerelease; "zipFileName"="Json$($version.Major)0r$($version.Release).zip"; "signAssemblies"=$sign; "signKeyPath"=$keyPath; "treatWarningsAsErrors"=$true; "buildNuGet"=$true}
#  env:
#    BuildId: $(Build.BuildId)
#    SourceBranch: $(Build.SourceBranch)
#  displayName: 'Run build'
